stages:
  - quality-gates
  - package-docker
  - deploy-k8s-release
  - expose-release
  - drop-k8s-release

variables:
  CI_DEBUG_TRACE: "false"
  PHP_DOCKER_IMAGE_NAME: "${CI_PROJECT_PATH_SLUG}-php"
  APACHE_DOCKER_IMAGE_NAME: "${CI_PROJECT_PATH_SLUG}-apache"
  APACHE_VERSION: "2.4-4.0.4"
  PHP_VERSION: "7.3-4.12.5"

#Code sniffer
code-sniffer:
  image: niji/php-quality-tools
  stage: quality-gates
  script: "phpcs --standard=phpcs.xml.dist"
  tags:
    - ci

#Sonarqube
sonarqube:
  image: ciricihq/gitlab-sonar-scanner
  stage: quality-gates
  retry: 1
  script:
    - |
      sonar-scanner -X -Dsonar.host.url="http://sonarqube-sonarqube.default:9000" \
      -Dsonar.branch="${CI_COMMIT_REF_NAME}" \
      -Dsonar.projectName="${GCLOUD_PROJECT_ID}-${CI_COMMIT_SHA}:" \
      -Dsonar.projectKey="${GCLOUD_PROJECT_ID}" \
      -Dsonar.sources="." \
      -Dsonar.gitlab.ref_name=${CI_COMMIT_REF_NAME} \
      -Dsonar.gitlab.commit_sha=${CI_COMMIT_SHA} \
      -Dsonar.gitlab.project_id=${CI_PROJECT_PATH} \
      -Dsonar.github.pullRequest=${PULL_REQUEST_ID} \
      -Dsonar.analysis.mode="publish" \
      -Dsonar.language="php"
  tags:
    - ci

#Template injected on steps that needs credentials to connect to Google Cloud Builder and other Gcloud services
.gcloudAuth: &gcloudAuth
  - echo $GCLOUD_GITLAB_RUNNER_SERVICE_KEY | base64 --decode -i > ~/gcloud-gitlab-runner-service-key.json
  - gcloud auth activate-service-account gitlab-runner@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --key-file ~/gcloud-gitlab-runner-service-key.json
  - gcloud config set project ${GCLOUD_PROJECT_ID}
  - gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER --zone $GCLOUD_DEFAULT_ZONE

#Create Docker image for both php and apoche on Google Container Builder
#Theses builds uses multi-stage build features :
# - a first php image to build artifact,
# - a second with php plus artifact from previous stage
# - a third with apache plus artifact from php
package-docker-php-apache:
  stage: package-docker
  image: gcr.io/cloud-builders/gcloud
  before_script: *gcloudAuth
  script:
    - |
      gcloud builds submit . \
        --config=./automation/docker/cloudbuild-php.yaml \
        --substitutions _GCLOUD_PROJECT_ID=$GCLOUD_PROJECT_ID,_CI_COMMIT_SHA=${CI_COMMIT_SHA},_CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG},_GCLOUD_GITLAB_RUNNER_SERVICE_KEY=${GCLOUD_GITLAB_RUNNER_SERVICE_KEY},_GCLOUD_ARTIFACTS_BUCKET=${GCLOUD_ARTIFACTS_BUCKET},_PHP_VERSION=${PHP_VERSION}
    - |
      gcloud builds submit . \
        --config=./automation/docker/cloudbuild-apache.yaml \
        --substitutions _GCLOUD_PROJECT_ID=$GCLOUD_PROJECT_ID,_CI_COMMIT_SHA=${CI_COMMIT_SHA},_CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG},_GCLOUD_ARTIFACTS_BUCKET=${GCLOUD_ARTIFACTS_BUCKET},_APACHE_VERSION=${APACHE_VERSION}
  tags:
    - ci
  only:
    - master
    - /^release.*/
    - /^feature.*/

#Template injected on steps that needs credentials to connect to Google Services and credentials to Helm Tiller Pod
.gcloud_helmAuth: &gcloud_helmAuth
  - export MIN_CI_COMMIT_SHA=${CI_COMMIT_SHA:0:8}
  - echo $GCLOUD_GITLAB_RUNNER_SERVICE_KEY | base64 -d > ~/gcloud-gitlab-runner-service-key.json
  - gcloud auth activate-service-account gitlab-runner@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --key-file ~/gcloud-gitlab-runner-service-key.json
  - gcloud config set project ${GCLOUD_PROJECT_ID}
  - gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER --zone $GCLOUD_DEFAULT_ZONE
  - helm init --client-only
  - cd automation/kubernetes/charts/drupal-niji
  - helm dependency update

# purge pv and pvc of mariadb and redis
# Clean PVC & PV in order for a new install (NOT TO USE ON UPGRADE) to start on a proper state
.clean-pvc: &clean-pvc |
  pvRedisDB=$(kubectl get pvc -l app=redis,release=${RELEASE_NAME} -o=jsonpath='{range .items[*]}{.spec.volumeName}' -n ${ENV})
  pvMariaDB=$(kubectl get pvc -l app=mariadb,release=${RELEASE_NAME} -o=jsonpath='{range .items[*]}{.spec.volumeName}' -n ${ENV})
  nofailIfNoPV=`kubectl delete pv $pvRedisDB $pvMariaDB -n ${ENV} || :`
  kubectl delete pvc -l app=mariadb,release=${RELEASE_NAME} -n ${ENV}
  kubectl delete pvc -l app=redis,release=${RELEASE_NAME} -n ${ENV}

.install-release: &install-release |
  helm install . \
  --set ingress.hostname=drupal-${RELEASE_NAME}.${BASE_DOMAIN} \
  --set image.repository=${GCLOUD_PROJECT_ID}/img/php \
  --set image.tag=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA} \
  --set apache.image.repository=${GCLOUD_PROJECT_ID}/img/apache \
  --set apache.image.tag=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA} \
  -f values-${ENV}.yml \
  --name ${RELEASE_NAME} \
  --namespace ${ENV} \
  --wait

.update-release: &update-release |
  # find the deployed pod and set maintenance mode
  drupalPodUpgrade=`kubectl get pod --ignore-not-found=true -n ${ENV} --selector=app=${RELEASE_NAME}-drupal-niji -o=jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running`
  kubectl exec -it --namespace ${ENV} $drupalPodUpgrade --container drupal -- sh -c "cd /var/www/html/web/sites/default/ && drush sset system.maintenance_mode 1 && drush cr"
  # find existing db password
  userPassword=`kubectl get secret --namespace ${ENV} ${RELEASE_NAME}-mariadb -o jsonpath="{.data.mariadb-password}" | base64 -d`
  rootPassword=`kubectl get secret --namespace ${ENV} ${RELEASE_NAME}-mariadb -o jsonpath="{.data.mariadb-root-password}" | base64 -d`
  helm upgrade ${RELEASE_NAME} . \
    --set ingress.hostname=drupal-${RELEASE_NAME}.${BASE_DOMAIN} \
    --set image.repository=${GCLOUD_PROJECT_ID}/img/php \
    --set image.tag=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA} \
    --set apache.image.repository=${GCLOUD_PROJECT_ID}/img/apache \
    --set apache.image.tag=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA} \
    --set mariadb.rootUser.password=${rootPassword} \
    --set mariadb.db.password=${userPassword} \
    -f values-${ENV}.yml \
    --namespace ${ENV} \
    --wait

.purge-release: &purge-release |
  nofail=`helm del --purge ${RELEASE_NAME} || :`

.post-install: &post-install |
  # find the deployed pod
  drupalPod=`kubectl get pod --ignore-not-found=true -n ${ENV} --selector=app=${RELEASE_NAME}-drupal-niji -o=jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running`
  # run installation script in the php container inside the pod
  kubectl exec -it $drupalPod --container drupal /var/www/html/automation/bin/install.sh --namespace ${ENV}
  kubectl exec -it $drupalPod --container drupal /var/www/html/automation/bin/reset_password.sh --namespace ${ENV}

.post-upgrade: &post-upgrade |
  # find the deployed pod
  drupalPod=`kubectl get pod --ignore-not-found=true -n ${ENV} --selector=app=${RELEASE_NAME}-drupal-niji -o=jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running`
  # run upgrade script in the php container inside the pod and disable maintenance
  kubectl exec -it --namespace ${ENV} $drupalPod --container drupal -- /var/www/html/automation/bin/update.sh
  kubectl exec -it --namespace ${ENV} $drupalPod --container drupal -- sh -c "cd /var/www/html/web/sites/default/ && drush sset system.maintenance_mode 0 && drush cr"


# Test deployement with best effort CPU and Mem and no persistence in integ namespace
deploy-integ:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=integ
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *clean-pvc
    # purge the release ! if not done the next install will fail
    - *purge-release
    - *install-release
    - *post-install
  only:
    - master
  tags:
    - integ

# Drop test deployment
drop-integ:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: drop-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=integ
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *purge-release
  only:
    - master
  tags:
    - integ

# Deploy for demo with best effort CPU and Mem and no persistence in feature namespace
deploy-feature:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=feature
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *clean-pvc
    # purge the release ! if not done the next install will fail
    - *purge-release
    - *install-release
    - *post-install
  when: manual
  only:
    - /^feature.*/
    - master
  tags:
    - feature

# Upgrade for demo with best effort CPU and Mem and no persistence in feature namespace
upgrade-feature:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=feature
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *update-release
    - *post-upgrade
  when: manual
  only:
    - /^feature.*/
    - master
  tags:
    - feature

# Drop feature deploymement
drop-feature:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: drop-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=feature
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *purge-release
  when: manual
  only:
    - /^feature.*/
    - master
  tags:
    - feature

# Deployement with best effort CPU and Mem and *persistence* in rec namespace
deploy-rec:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=rec
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *clean-pvc
    # purge the release ! if not done the next install will fail
    - *purge-release
    - *install-release
    - *post-install
  when: manual
  only:
    - /^release.*/
    - master
  tags:
    - rec

# Upgrade with best effort CPU and Mem and *persistence* in rec namespace
upgrade-rec:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=rec
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *update-release
    - *post-upgrade
  when: manual
  only:
    - /^release.*/
    - master
  tags:
    - rec

# Drop rec deployement
drop-rec:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: drop-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=rec
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *purge-release
  when: manual
  only:
    - /^release.*/
    - master
  tags:
    - rec

# Deployement with best effort CPU and Mem and no persistence in demo namespace
deploy-demo:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=demo
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *clean-pvc
    # purge the release ! if not done the next install will fail
    - *purge-release
    - *install-release
    - *post-install
  when: manual
  only:
    - /^release.*/
    - master
  tags:
    - demo

# Upgrade with best effort CPU and Mem and no persistence in demo namespace
upgrade-demo:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: deploy-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=demo
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *update-release
    - *post-upgrade
  when: manual
  only:
    - /^release.*/
    - master
  tags:
    - demo 

# Drop demo deployement
drop-demo:
  image: eu.gcr.io/public-docker-image/niji/helm-gke:latest
  stage: drop-k8s-release
  before_script: *gcloud_helmAuth
  retry: 1
  script:
    - ENV=demo
    - RELEASE_NAME=${ENV}-${CI_COMMIT_REF_SLUG}
    - *purge-release
  when: manual
  only:
    - /^release.*/
    - master
  tags:
    - demo

# Sign release artefact tgz
sign-artefact-tgz-release:
  image: eu.gcr.io/public-docker-image/niji/gsutil-ssl:latest
  stage: expose-release
  script:
    - echo $GCLOUD_GITLAB_RUNNER_SERVICE_KEY | base64 -d > ~/gcloud-gitlab-runner-service-key.json
    - gcloud auth activate-service-account gitlab-runner@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --key-file ~/gcloud-gitlab-runner-service-key.json
    - gcloud config set project ${GCLOUD_PROJECT_ID}
    - echo $GCLOUD_ARTIFACT_SIGNED_SERVICE_KEY | base64 -d > ~/gcloud-arti-signed-service-key.json
    - gsutil signurl -d 7d  ~/gcloud-arti-signed-service-key.json gs://${GCLOUD_ARTIFACTS_BUCKET}/${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}.tar.gz
  when: manual
  only:
    - /^release.*/
  tags:
    - ci

# Sign release image
sign-artefact-docker-release:
  image: eu.gcr.io/public-docker-image/niji/gsutil-ssl:latest
  stage: expose-release
  script:
    - echo $GCLOUD_GITLAB_RUNNER_SERVICE_KEY | base64 -d > ~/gcloud-gitlab-runner-service-key.json
    - gcloud auth activate-service-account gitlab-runner@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --key-file ~/gcloud-gitlab-runner-service-key.json
    - gcloud config set project ${GCLOUD_PROJECT_ID}
    - echo $GCLOUD_ARTIFACT_SIGNED_SERVICE_KEY | base64 -d > ~/gcloud-arti-signed-service-key.json
    - gsutil signurl -d 7d  ~/gcloud-arti-signed-service-key.json gs://${GCLOUD_ARTIFACTS_BUCKET}/${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}.php.docker.tar.gz
    - gsutil signurl -d 7d  ~/gcloud-arti-signed-service-key.json gs://${GCLOUD_ARTIFACTS_BUCKET}/${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}.apache.docker.tar.gz
  when: manual
  only:
    - /^release.*/
  tags:
    - ci